syntax = "proto3";

import public "geyser.proto";

package fumarole;

service Fumarole {
  rpc ListAvailableCommitmentLevels(ListAvailableCommitmentLevelsRequest) returns (ListAvailableCommitmentLevelsResponse) {}
  rpc GetConsumerGroupInfo(GetConsumerGroupInfoRequest) returns (ConsumerGroupInfo) {}
  rpc ListConsumerGroups(ListConsumerGroupsRequest) returns (ListConsumerGroupsResponse) {}
  rpc DeleteConsumerGroup(DeleteConsumerGroupRequest) returns (DeleteConsumerGroupResponse) {}
  rpc CreateStaticConsumerGroup(CreateStaticConsumerGroupRequest) returns (CreateStaticConsumerGroupResponse) {}
  rpc Subscribe(stream SubscribeRequest) returns (stream geyser.SubscribeUpdate) {}
  rpc GetSlotLagInfo(GetSlotLagInfoRequest) returns (GetSlotLagInfoResponse) {}
  rpc GetOldestSlot(GetOldestSlotRequest) returns (GetOldestSlotResponse) {}
}

message ListAvailableCommitmentLevelsRequest {}

message ListAvailableCommitmentLevelsResponse {
  repeated geyser.CommitmentLevel commitment_levels = 1;
}

message GetConsumerGroupInfoRequest {
  string consumer_group_label = 1;
}


message DeleteConsumerGroupRequest {
  string consumer_group_label = 1;
}

message DeleteConsumerGroupResponse {
  bool success = 1;
}

message ListConsumerGroupsRequest {}

message ListConsumerGroupsResponse {
  repeated ConsumerGroupInfo consumer_groups = 1;
}


message ConsumerGroupInfo {
  string id = 1;
  string consumer_group_label = 2;
  ConsumerGroupType consumer_group_type = 3;
  uint32 member_count = 4;
  geyser.CommitmentLevel commitment_level = 5;
  EventSubscriptionPolicy event_subscription_policy = 6;
  bool is_stale = 7;
}

message GetSlotLagInfoRequest {
  string consumer_group_label = 1;
}

message GetSlotLagInfoResponse {
  uint64 max_slot_seen = 1;
  uint64 global_max_slot = 2;
}

message SubscribeRequest {
  string consumer_group_label = 1;
  optional uint32 consumer_id = 2;
  map<string, geyser.SubscribeRequestFilterAccounts> accounts = 3;
  map<string, geyser.SubscribeRequestFilterTransactions> transactions = 4;
}

message CreateStaticConsumerGroupResponse {
  string group_id = 1;
}

enum ConsumerGroupType {
  STATIC = 0;
}

enum InitialOffsetPolicy {
  EARLIEST = 0;
  LATEST = 1;
  SLOT = 2;
}

enum EventSubscriptionPolicy {
  ACCOUNT_UPDATE_ONLY = 0;
  TRANSACTION_ONLY = 1;
  BOTH = 2;
}

message CreateStaticConsumerGroupRequest {
  string consumer_group_label = 1;
  optional uint32 member_count = 2;
  InitialOffsetPolicy initial_offset_policy = 3;
  geyser.CommitmentLevel commitment_level = 4;
  EventSubscriptionPolicy event_subscription_policy = 5;
  optional int64 at_slot = 6;
}

message GetOldestSlotRequest {
  geyser.CommitmentLevel commitment_level = 1;
}

message GetOldestSlotResponse {
  optional uint64 slot = 1;
}