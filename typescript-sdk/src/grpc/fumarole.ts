// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.30.0
// source: fumarole.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  ClientDuplexStream,
  type ClientOptions,
  type ClientUnaryCall,
  handleBidiStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import _m0 from "protobufjs/minimal";
import {
  CommitmentLevel,
  commitmentLevelFromJSON,
  commitmentLevelToJSON,
  SubscribeRequestFilterAccounts,
  SubscribeRequestFilterTransactions,
  SubscribeUpdate,
} from "./geyser";

export const protobufPackage = "fumarole";

export enum ConsumerGroupType {
  STATIC = 0,
  UNRECOGNIZED = -1,
}

export function consumerGroupTypeFromJSON(object: any): ConsumerGroupType {
  switch (object) {
    case 0:
    case "STATIC":
      return ConsumerGroupType.STATIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConsumerGroupType.UNRECOGNIZED;
  }
}

export function consumerGroupTypeToJSON(object: ConsumerGroupType): string {
  switch (object) {
    case ConsumerGroupType.STATIC:
      return "STATIC";
    case ConsumerGroupType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum InitialOffsetPolicy {
  EARLIEST = 0,
  LATEST = 1,
  SLOT = 2,
  UNRECOGNIZED = -1,
}

export function initialOffsetPolicyFromJSON(object: any): InitialOffsetPolicy {
  switch (object) {
    case 0:
    case "EARLIEST":
      return InitialOffsetPolicy.EARLIEST;
    case 1:
    case "LATEST":
      return InitialOffsetPolicy.LATEST;
    case 2:
    case "SLOT":
      return InitialOffsetPolicy.SLOT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InitialOffsetPolicy.UNRECOGNIZED;
  }
}

export function initialOffsetPolicyToJSON(object: InitialOffsetPolicy): string {
  switch (object) {
    case InitialOffsetPolicy.EARLIEST:
      return "EARLIEST";
    case InitialOffsetPolicy.LATEST:
      return "LATEST";
    case InitialOffsetPolicy.SLOT:
      return "SLOT";
    case InitialOffsetPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EventSubscriptionPolicy {
  ACCOUNT_UPDATE_ONLY = 0,
  TRANSACTION_ONLY = 1,
  BOTH = 2,
  UNRECOGNIZED = -1,
}

export function eventSubscriptionPolicyFromJSON(object: any): EventSubscriptionPolicy {
  switch (object) {
    case 0:
    case "ACCOUNT_UPDATE_ONLY":
      return EventSubscriptionPolicy.ACCOUNT_UPDATE_ONLY;
    case 1:
    case "TRANSACTION_ONLY":
      return EventSubscriptionPolicy.TRANSACTION_ONLY;
    case 2:
    case "BOTH":
      return EventSubscriptionPolicy.BOTH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EventSubscriptionPolicy.UNRECOGNIZED;
  }
}

export function eventSubscriptionPolicyToJSON(object: EventSubscriptionPolicy): string {
  switch (object) {
    case EventSubscriptionPolicy.ACCOUNT_UPDATE_ONLY:
      return "ACCOUNT_UPDATE_ONLY";
    case EventSubscriptionPolicy.TRANSACTION_ONLY:
      return "TRANSACTION_ONLY";
    case EventSubscriptionPolicy.BOTH:
      return "BOTH";
    case EventSubscriptionPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ListAvailableCommitmentLevelsRequest {
}

export interface ListAvailableCommitmentLevelsResponse {
  commitmentLevels: CommitmentLevel[];
}

export interface GetConsumerGroupInfoRequest {
  consumerGroupLabel: string;
}

export interface DeleteConsumerGroupRequest {
  consumerGroupLabel: string;
}

export interface DeleteConsumerGroupResponse {
  success: boolean;
}

export interface ListConsumerGroupsRequest {
}

export interface ListConsumerGroupsResponse {
  consumerGroups: ConsumerGroupInfo[];
}

export interface ConsumerGroupInfo {
  id: string;
  consumerGroupLabel: string;
  consumerGroupType: ConsumerGroupType;
  memberCount: number;
  commitmentLevel: CommitmentLevel;
  eventSubscriptionPolicy: EventSubscriptionPolicy;
  isStale: boolean;
}

export interface GetSlotLagInfoRequest {
  consumerGroupLabel: string;
}

export interface GetSlotLagInfoResponse {
  maxSlotSeen: string;
  globalMaxSlot: string;
}

export interface SubscribeRequest {
  consumerGroupLabel: string;
  consumerId?: number | undefined;
  accounts: { [key: string]: SubscribeRequestFilterAccounts };
  transactions: { [key: string]: SubscribeRequestFilterTransactions };
}

export interface SubscribeRequest_AccountsEntry {
  key: string;
  value: SubscribeRequestFilterAccounts | undefined;
}

export interface SubscribeRequest_TransactionsEntry {
  key: string;
  value: SubscribeRequestFilterTransactions | undefined;
}

export interface CreateStaticConsumerGroupResponse {
  groupId: string;
}

export interface CreateStaticConsumerGroupRequest {
  consumerGroupLabel: string;
  memberCount?: number | undefined;
  initialOffsetPolicy: InitialOffsetPolicy;
  commitmentLevel: CommitmentLevel;
  eventSubscriptionPolicy: EventSubscriptionPolicy;
  atSlot?: string | undefined;
}

export interface GetOldestSlotRequest {
  commitmentLevel: CommitmentLevel;
}

export interface GetOldestSlotResponse {
  slot?: string | undefined;
}

function createBaseListAvailableCommitmentLevelsRequest(): ListAvailableCommitmentLevelsRequest {
  return {};
}

export const ListAvailableCommitmentLevelsRequest = {
  encode(_: ListAvailableCommitmentLevelsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAvailableCommitmentLevelsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAvailableCommitmentLevelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListAvailableCommitmentLevelsRequest {
    return {};
  },

  toJSON(_: ListAvailableCommitmentLevelsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAvailableCommitmentLevelsRequest>, I>>(
    base?: I,
  ): ListAvailableCommitmentLevelsRequest {
    return ListAvailableCommitmentLevelsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAvailableCommitmentLevelsRequest>, I>>(
    _: I,
  ): ListAvailableCommitmentLevelsRequest {
    const message = createBaseListAvailableCommitmentLevelsRequest();
    return message;
  },
};

function createBaseListAvailableCommitmentLevelsResponse(): ListAvailableCommitmentLevelsResponse {
  return { commitmentLevels: [] };
}

export const ListAvailableCommitmentLevelsResponse = {
  encode(message: ListAvailableCommitmentLevelsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.commitmentLevels) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAvailableCommitmentLevelsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAvailableCommitmentLevelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.commitmentLevels.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.commitmentLevels.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAvailableCommitmentLevelsResponse {
    return {
      commitmentLevels: globalThis.Array.isArray(object?.commitmentLevels)
        ? object.commitmentLevels.map((e: any) => commitmentLevelFromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAvailableCommitmentLevelsResponse): unknown {
    const obj: any = {};
    if (message.commitmentLevels?.length) {
      obj.commitmentLevels = message.commitmentLevels.map((e) => commitmentLevelToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListAvailableCommitmentLevelsResponse>, I>>(
    base?: I,
  ): ListAvailableCommitmentLevelsResponse {
    return ListAvailableCommitmentLevelsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListAvailableCommitmentLevelsResponse>, I>>(
    object: I,
  ): ListAvailableCommitmentLevelsResponse {
    const message = createBaseListAvailableCommitmentLevelsResponse();
    message.commitmentLevels = object.commitmentLevels?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetConsumerGroupInfoRequest(): GetConsumerGroupInfoRequest {
  return { consumerGroupLabel: "" };
}

export const GetConsumerGroupInfoRequest = {
  encode(message: GetConsumerGroupInfoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.consumerGroupLabel !== "") {
      writer.uint32(10).string(message.consumerGroupLabel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetConsumerGroupInfoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetConsumerGroupInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consumerGroupLabel = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetConsumerGroupInfoRequest {
    return { consumerGroupLabel: isSet(object.consumerGroupLabel) ? globalThis.String(object.consumerGroupLabel) : "" };
  },

  toJSON(message: GetConsumerGroupInfoRequest): unknown {
    const obj: any = {};
    if (message.consumerGroupLabel !== "") {
      obj.consumerGroupLabel = message.consumerGroupLabel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetConsumerGroupInfoRequest>, I>>(base?: I): GetConsumerGroupInfoRequest {
    return GetConsumerGroupInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetConsumerGroupInfoRequest>, I>>(object: I): GetConsumerGroupInfoRequest {
    const message = createBaseGetConsumerGroupInfoRequest();
    message.consumerGroupLabel = object.consumerGroupLabel ?? "";
    return message;
  },
};

function createBaseDeleteConsumerGroupRequest(): DeleteConsumerGroupRequest {
  return { consumerGroupLabel: "" };
}

export const DeleteConsumerGroupRequest = {
  encode(message: DeleteConsumerGroupRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.consumerGroupLabel !== "") {
      writer.uint32(10).string(message.consumerGroupLabel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteConsumerGroupRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConsumerGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consumerGroupLabel = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConsumerGroupRequest {
    return { consumerGroupLabel: isSet(object.consumerGroupLabel) ? globalThis.String(object.consumerGroupLabel) : "" };
  },

  toJSON(message: DeleteConsumerGroupRequest): unknown {
    const obj: any = {};
    if (message.consumerGroupLabel !== "") {
      obj.consumerGroupLabel = message.consumerGroupLabel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteConsumerGroupRequest>, I>>(base?: I): DeleteConsumerGroupRequest {
    return DeleteConsumerGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteConsumerGroupRequest>, I>>(object: I): DeleteConsumerGroupRequest {
    const message = createBaseDeleteConsumerGroupRequest();
    message.consumerGroupLabel = object.consumerGroupLabel ?? "";
    return message;
  },
};

function createBaseDeleteConsumerGroupResponse(): DeleteConsumerGroupResponse {
  return { success: false };
}

export const DeleteConsumerGroupResponse = {
  encode(message: DeleteConsumerGroupResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteConsumerGroupResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConsumerGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteConsumerGroupResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteConsumerGroupResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteConsumerGroupResponse>, I>>(base?: I): DeleteConsumerGroupResponse {
    return DeleteConsumerGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteConsumerGroupResponse>, I>>(object: I): DeleteConsumerGroupResponse {
    const message = createBaseDeleteConsumerGroupResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListConsumerGroupsRequest(): ListConsumerGroupsRequest {
  return {};
}

export const ListConsumerGroupsRequest = {
  encode(_: ListConsumerGroupsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListConsumerGroupsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConsumerGroupsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListConsumerGroupsRequest {
    return {};
  },

  toJSON(_: ListConsumerGroupsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListConsumerGroupsRequest>, I>>(base?: I): ListConsumerGroupsRequest {
    return ListConsumerGroupsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListConsumerGroupsRequest>, I>>(_: I): ListConsumerGroupsRequest {
    const message = createBaseListConsumerGroupsRequest();
    return message;
  },
};

function createBaseListConsumerGroupsResponse(): ListConsumerGroupsResponse {
  return { consumerGroups: [] };
}

export const ListConsumerGroupsResponse = {
  encode(message: ListConsumerGroupsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.consumerGroups) {
      ConsumerGroupInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListConsumerGroupsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConsumerGroupsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consumerGroups.push(ConsumerGroupInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConsumerGroupsResponse {
    return {
      consumerGroups: globalThis.Array.isArray(object?.consumerGroups)
        ? object.consumerGroups.map((e: any) => ConsumerGroupInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListConsumerGroupsResponse): unknown {
    const obj: any = {};
    if (message.consumerGroups?.length) {
      obj.consumerGroups = message.consumerGroups.map((e) => ConsumerGroupInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListConsumerGroupsResponse>, I>>(base?: I): ListConsumerGroupsResponse {
    return ListConsumerGroupsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListConsumerGroupsResponse>, I>>(object: I): ListConsumerGroupsResponse {
    const message = createBaseListConsumerGroupsResponse();
    message.consumerGroups = object.consumerGroups?.map((e) => ConsumerGroupInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseConsumerGroupInfo(): ConsumerGroupInfo {
  return {
    id: "",
    consumerGroupLabel: "",
    consumerGroupType: 0,
    memberCount: 0,
    commitmentLevel: 0,
    eventSubscriptionPolicy: 0,
    isStale: false,
  };
}

export const ConsumerGroupInfo = {
  encode(message: ConsumerGroupInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.consumerGroupLabel !== "") {
      writer.uint32(18).string(message.consumerGroupLabel);
    }
    if (message.consumerGroupType !== 0) {
      writer.uint32(24).int32(message.consumerGroupType);
    }
    if (message.memberCount !== 0) {
      writer.uint32(32).uint32(message.memberCount);
    }
    if (message.commitmentLevel !== 0) {
      writer.uint32(40).int32(message.commitmentLevel);
    }
    if (message.eventSubscriptionPolicy !== 0) {
      writer.uint32(48).int32(message.eventSubscriptionPolicy);
    }
    if (message.isStale !== false) {
      writer.uint32(56).bool(message.isStale);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ConsumerGroupInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsumerGroupInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.consumerGroupLabel = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.consumerGroupType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.memberCount = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.commitmentLevel = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.eventSubscriptionPolicy = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isStale = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsumerGroupInfo {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      consumerGroupLabel: isSet(object.consumerGroupLabel) ? globalThis.String(object.consumerGroupLabel) : "",
      consumerGroupType: isSet(object.consumerGroupType) ? consumerGroupTypeFromJSON(object.consumerGroupType) : 0,
      memberCount: isSet(object.memberCount) ? globalThis.Number(object.memberCount) : 0,
      commitmentLevel: isSet(object.commitmentLevel) ? commitmentLevelFromJSON(object.commitmentLevel) : 0,
      eventSubscriptionPolicy: isSet(object.eventSubscriptionPolicy)
        ? eventSubscriptionPolicyFromJSON(object.eventSubscriptionPolicy)
        : 0,
      isStale: isSet(object.isStale) ? globalThis.Boolean(object.isStale) : false,
    };
  },

  toJSON(message: ConsumerGroupInfo): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.consumerGroupLabel !== "") {
      obj.consumerGroupLabel = message.consumerGroupLabel;
    }
    if (message.consumerGroupType !== 0) {
      obj.consumerGroupType = consumerGroupTypeToJSON(message.consumerGroupType);
    }
    if (message.memberCount !== 0) {
      obj.memberCount = Math.round(message.memberCount);
    }
    if (message.commitmentLevel !== 0) {
      obj.commitmentLevel = commitmentLevelToJSON(message.commitmentLevel);
    }
    if (message.eventSubscriptionPolicy !== 0) {
      obj.eventSubscriptionPolicy = eventSubscriptionPolicyToJSON(message.eventSubscriptionPolicy);
    }
    if (message.isStale !== false) {
      obj.isStale = message.isStale;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsumerGroupInfo>, I>>(base?: I): ConsumerGroupInfo {
    return ConsumerGroupInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsumerGroupInfo>, I>>(object: I): ConsumerGroupInfo {
    const message = createBaseConsumerGroupInfo();
    message.id = object.id ?? "";
    message.consumerGroupLabel = object.consumerGroupLabel ?? "";
    message.consumerGroupType = object.consumerGroupType ?? 0;
    message.memberCount = object.memberCount ?? 0;
    message.commitmentLevel = object.commitmentLevel ?? 0;
    message.eventSubscriptionPolicy = object.eventSubscriptionPolicy ?? 0;
    message.isStale = object.isStale ?? false;
    return message;
  },
};

function createBaseGetSlotLagInfoRequest(): GetSlotLagInfoRequest {
  return { consumerGroupLabel: "" };
}

export const GetSlotLagInfoRequest = {
  encode(message: GetSlotLagInfoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.consumerGroupLabel !== "") {
      writer.uint32(10).string(message.consumerGroupLabel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSlotLagInfoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSlotLagInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consumerGroupLabel = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSlotLagInfoRequest {
    return { consumerGroupLabel: isSet(object.consumerGroupLabel) ? globalThis.String(object.consumerGroupLabel) : "" };
  },

  toJSON(message: GetSlotLagInfoRequest): unknown {
    const obj: any = {};
    if (message.consumerGroupLabel !== "") {
      obj.consumerGroupLabel = message.consumerGroupLabel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSlotLagInfoRequest>, I>>(base?: I): GetSlotLagInfoRequest {
    return GetSlotLagInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSlotLagInfoRequest>, I>>(object: I): GetSlotLagInfoRequest {
    const message = createBaseGetSlotLagInfoRequest();
    message.consumerGroupLabel = object.consumerGroupLabel ?? "";
    return message;
  },
};

function createBaseGetSlotLagInfoResponse(): GetSlotLagInfoResponse {
  return { maxSlotSeen: "0", globalMaxSlot: "0" };
}

export const GetSlotLagInfoResponse = {
  encode(message: GetSlotLagInfoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxSlotSeen !== "0") {
      writer.uint32(8).uint64(message.maxSlotSeen);
    }
    if (message.globalMaxSlot !== "0") {
      writer.uint32(16).uint64(message.globalMaxSlot);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSlotLagInfoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSlotLagInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxSlotSeen = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.globalMaxSlot = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSlotLagInfoResponse {
    return {
      maxSlotSeen: isSet(object.maxSlotSeen) ? globalThis.String(object.maxSlotSeen) : "0",
      globalMaxSlot: isSet(object.globalMaxSlot) ? globalThis.String(object.globalMaxSlot) : "0",
    };
  },

  toJSON(message: GetSlotLagInfoResponse): unknown {
    const obj: any = {};
    if (message.maxSlotSeen !== "0") {
      obj.maxSlotSeen = message.maxSlotSeen;
    }
    if (message.globalMaxSlot !== "0") {
      obj.globalMaxSlot = message.globalMaxSlot;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSlotLagInfoResponse>, I>>(base?: I): GetSlotLagInfoResponse {
    return GetSlotLagInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSlotLagInfoResponse>, I>>(object: I): GetSlotLagInfoResponse {
    const message = createBaseGetSlotLagInfoResponse();
    message.maxSlotSeen = object.maxSlotSeen ?? "0";
    message.globalMaxSlot = object.globalMaxSlot ?? "0";
    return message;
  },
};

function createBaseSubscribeRequest(): SubscribeRequest {
  return { consumerGroupLabel: "", consumerId: undefined, accounts: {}, transactions: {} };
}

export const SubscribeRequest = {
  encode(message: SubscribeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.consumerGroupLabel !== "") {
      writer.uint32(10).string(message.consumerGroupLabel);
    }
    if (message.consumerId !== undefined) {
      writer.uint32(16).uint32(message.consumerId);
    }
    Object.entries(message.accounts).forEach(([key, value]) => {
      SubscribeRequest_AccountsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    Object.entries(message.transactions).forEach(([key, value]) => {
      SubscribeRequest_TransactionsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consumerGroupLabel = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.consumerId = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = SubscribeRequest_AccountsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.accounts[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = SubscribeRequest_TransactionsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.transactions[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRequest {
    return {
      consumerGroupLabel: isSet(object.consumerGroupLabel) ? globalThis.String(object.consumerGroupLabel) : "",
      consumerId: isSet(object.consumerId) ? globalThis.Number(object.consumerId) : undefined,
      accounts: isObject(object.accounts)
        ? Object.entries(object.accounts).reduce<{ [key: string]: SubscribeRequestFilterAccounts }>(
          (acc, [key, value]) => {
            acc[key] = SubscribeRequestFilterAccounts.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      transactions: isObject(object.transactions)
        ? Object.entries(object.transactions).reduce<{ [key: string]: SubscribeRequestFilterTransactions }>(
          (acc, [key, value]) => {
            acc[key] = SubscribeRequestFilterTransactions.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: SubscribeRequest): unknown {
    const obj: any = {};
    if (message.consumerGroupLabel !== "") {
      obj.consumerGroupLabel = message.consumerGroupLabel;
    }
    if (message.consumerId !== undefined) {
      obj.consumerId = Math.round(message.consumerId);
    }
    if (message.accounts) {
      const entries = Object.entries(message.accounts);
      if (entries.length > 0) {
        obj.accounts = {};
        entries.forEach(([k, v]) => {
          obj.accounts[k] = SubscribeRequestFilterAccounts.toJSON(v);
        });
      }
    }
    if (message.transactions) {
      const entries = Object.entries(message.transactions);
      if (entries.length > 0) {
        obj.transactions = {};
        entries.forEach(([k, v]) => {
          obj.transactions[k] = SubscribeRequestFilterTransactions.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeRequest>, I>>(base?: I): SubscribeRequest {
    return SubscribeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeRequest>, I>>(object: I): SubscribeRequest {
    const message = createBaseSubscribeRequest();
    message.consumerGroupLabel = object.consumerGroupLabel ?? "";
    message.consumerId = object.consumerId ?? undefined;
    message.accounts = Object.entries(object.accounts ?? {}).reduce<{ [key: string]: SubscribeRequestFilterAccounts }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = SubscribeRequestFilterAccounts.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.transactions = Object.entries(object.transactions ?? {}).reduce<
      { [key: string]: SubscribeRequestFilterTransactions }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = SubscribeRequestFilterTransactions.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSubscribeRequest_AccountsEntry(): SubscribeRequest_AccountsEntry {
  return { key: "", value: undefined };
}

export const SubscribeRequest_AccountsEntry = {
  encode(message: SubscribeRequest_AccountsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SubscribeRequestFilterAccounts.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeRequest_AccountsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest_AccountsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = SubscribeRequestFilterAccounts.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRequest_AccountsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SubscribeRequestFilterAccounts.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SubscribeRequest_AccountsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SubscribeRequestFilterAccounts.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeRequest_AccountsEntry>, I>>(base?: I): SubscribeRequest_AccountsEntry {
    return SubscribeRequest_AccountsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeRequest_AccountsEntry>, I>>(
    object: I,
  ): SubscribeRequest_AccountsEntry {
    const message = createBaseSubscribeRequest_AccountsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SubscribeRequestFilterAccounts.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSubscribeRequest_TransactionsEntry(): SubscribeRequest_TransactionsEntry {
  return { key: "", value: undefined };
}

export const SubscribeRequest_TransactionsEntry = {
  encode(message: SubscribeRequest_TransactionsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SubscribeRequestFilterTransactions.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeRequest_TransactionsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest_TransactionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = SubscribeRequestFilterTransactions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRequest_TransactionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SubscribeRequestFilterTransactions.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SubscribeRequest_TransactionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SubscribeRequestFilterTransactions.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeRequest_TransactionsEntry>, I>>(
    base?: I,
  ): SubscribeRequest_TransactionsEntry {
    return SubscribeRequest_TransactionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeRequest_TransactionsEntry>, I>>(
    object: I,
  ): SubscribeRequest_TransactionsEntry {
    const message = createBaseSubscribeRequest_TransactionsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SubscribeRequestFilterTransactions.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseCreateStaticConsumerGroupResponse(): CreateStaticConsumerGroupResponse {
  return { groupId: "" };
}

export const CreateStaticConsumerGroupResponse = {
  encode(message: CreateStaticConsumerGroupResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.groupId !== "") {
      writer.uint32(10).string(message.groupId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateStaticConsumerGroupResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStaticConsumerGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateStaticConsumerGroupResponse {
    return { groupId: isSet(object.groupId) ? globalThis.String(object.groupId) : "" };
  },

  toJSON(message: CreateStaticConsumerGroupResponse): unknown {
    const obj: any = {};
    if (message.groupId !== "") {
      obj.groupId = message.groupId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateStaticConsumerGroupResponse>, I>>(
    base?: I,
  ): CreateStaticConsumerGroupResponse {
    return CreateStaticConsumerGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateStaticConsumerGroupResponse>, I>>(
    object: I,
  ): CreateStaticConsumerGroupResponse {
    const message = createBaseCreateStaticConsumerGroupResponse();
    message.groupId = object.groupId ?? "";
    return message;
  },
};

function createBaseCreateStaticConsumerGroupRequest(): CreateStaticConsumerGroupRequest {
  return {
    consumerGroupLabel: "",
    memberCount: undefined,
    initialOffsetPolicy: 0,
    commitmentLevel: 0,
    eventSubscriptionPolicy: 0,
    atSlot: undefined,
  };
}

export const CreateStaticConsumerGroupRequest = {
  encode(message: CreateStaticConsumerGroupRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.consumerGroupLabel !== "") {
      writer.uint32(10).string(message.consumerGroupLabel);
    }
    if (message.memberCount !== undefined) {
      writer.uint32(16).uint32(message.memberCount);
    }
    if (message.initialOffsetPolicy !== 0) {
      writer.uint32(24).int32(message.initialOffsetPolicy);
    }
    if (message.commitmentLevel !== 0) {
      writer.uint32(32).int32(message.commitmentLevel);
    }
    if (message.eventSubscriptionPolicy !== 0) {
      writer.uint32(40).int32(message.eventSubscriptionPolicy);
    }
    if (message.atSlot !== undefined) {
      writer.uint32(48).int64(message.atSlot);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateStaticConsumerGroupRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStaticConsumerGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.consumerGroupLabel = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.memberCount = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.initialOffsetPolicy = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.commitmentLevel = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.eventSubscriptionPolicy = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.atSlot = longToString(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateStaticConsumerGroupRequest {
    return {
      consumerGroupLabel: isSet(object.consumerGroupLabel) ? globalThis.String(object.consumerGroupLabel) : "",
      memberCount: isSet(object.memberCount) ? globalThis.Number(object.memberCount) : undefined,
      initialOffsetPolicy: isSet(object.initialOffsetPolicy)
        ? initialOffsetPolicyFromJSON(object.initialOffsetPolicy)
        : 0,
      commitmentLevel: isSet(object.commitmentLevel) ? commitmentLevelFromJSON(object.commitmentLevel) : 0,
      eventSubscriptionPolicy: isSet(object.eventSubscriptionPolicy)
        ? eventSubscriptionPolicyFromJSON(object.eventSubscriptionPolicy)
        : 0,
      atSlot: isSet(object.atSlot) ? globalThis.String(object.atSlot) : undefined,
    };
  },

  toJSON(message: CreateStaticConsumerGroupRequest): unknown {
    const obj: any = {};
    if (message.consumerGroupLabel !== "") {
      obj.consumerGroupLabel = message.consumerGroupLabel;
    }
    if (message.memberCount !== undefined) {
      obj.memberCount = Math.round(message.memberCount);
    }
    if (message.initialOffsetPolicy !== 0) {
      obj.initialOffsetPolicy = initialOffsetPolicyToJSON(message.initialOffsetPolicy);
    }
    if (message.commitmentLevel !== 0) {
      obj.commitmentLevel = commitmentLevelToJSON(message.commitmentLevel);
    }
    if (message.eventSubscriptionPolicy !== 0) {
      obj.eventSubscriptionPolicy = eventSubscriptionPolicyToJSON(message.eventSubscriptionPolicy);
    }
    if (message.atSlot !== undefined) {
      obj.atSlot = message.atSlot;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateStaticConsumerGroupRequest>, I>>(
    base?: I,
  ): CreateStaticConsumerGroupRequest {
    return CreateStaticConsumerGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateStaticConsumerGroupRequest>, I>>(
    object: I,
  ): CreateStaticConsumerGroupRequest {
    const message = createBaseCreateStaticConsumerGroupRequest();
    message.consumerGroupLabel = object.consumerGroupLabel ?? "";
    message.memberCount = object.memberCount ?? undefined;
    message.initialOffsetPolicy = object.initialOffsetPolicy ?? 0;
    message.commitmentLevel = object.commitmentLevel ?? 0;
    message.eventSubscriptionPolicy = object.eventSubscriptionPolicy ?? 0;
    message.atSlot = object.atSlot ?? undefined;
    return message;
  },
};

function createBaseGetOldestSlotRequest(): GetOldestSlotRequest {
  return { commitmentLevel: 0 };
}

export const GetOldestSlotRequest = {
  encode(message: GetOldestSlotRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.commitmentLevel !== 0) {
      writer.uint32(8).int32(message.commitmentLevel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOldestSlotRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOldestSlotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.commitmentLevel = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOldestSlotRequest {
    return { commitmentLevel: isSet(object.commitmentLevel) ? commitmentLevelFromJSON(object.commitmentLevel) : 0 };
  },

  toJSON(message: GetOldestSlotRequest): unknown {
    const obj: any = {};
    if (message.commitmentLevel !== 0) {
      obj.commitmentLevel = commitmentLevelToJSON(message.commitmentLevel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOldestSlotRequest>, I>>(base?: I): GetOldestSlotRequest {
    return GetOldestSlotRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOldestSlotRequest>, I>>(object: I): GetOldestSlotRequest {
    const message = createBaseGetOldestSlotRequest();
    message.commitmentLevel = object.commitmentLevel ?? 0;
    return message;
  },
};

function createBaseGetOldestSlotResponse(): GetOldestSlotResponse {
  return { slot: undefined };
}

export const GetOldestSlotResponse = {
  encode(message: GetOldestSlotResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.slot !== undefined) {
      writer.uint32(8).uint64(message.slot);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOldestSlotResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOldestSlotResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.slot = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOldestSlotResponse {
    return { slot: isSet(object.slot) ? globalThis.String(object.slot) : undefined };
  },

  toJSON(message: GetOldestSlotResponse): unknown {
    const obj: any = {};
    if (message.slot !== undefined) {
      obj.slot = message.slot;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOldestSlotResponse>, I>>(base?: I): GetOldestSlotResponse {
    return GetOldestSlotResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOldestSlotResponse>, I>>(object: I): GetOldestSlotResponse {
    const message = createBaseGetOldestSlotResponse();
    message.slot = object.slot ?? undefined;
    return message;
  },
};

export type FumaroleService = typeof FumaroleService;
export const FumaroleService = {
  listAvailableCommitmentLevels: {
    path: "/fumarole.Fumarole/ListAvailableCommitmentLevels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListAvailableCommitmentLevelsRequest) =>
      Buffer.from(ListAvailableCommitmentLevelsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListAvailableCommitmentLevelsRequest.decode(value),
    responseSerialize: (value: ListAvailableCommitmentLevelsResponse) =>
      Buffer.from(ListAvailableCommitmentLevelsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListAvailableCommitmentLevelsResponse.decode(value),
  },
  getConsumerGroupInfo: {
    path: "/fumarole.Fumarole/GetConsumerGroupInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetConsumerGroupInfoRequest) =>
      Buffer.from(GetConsumerGroupInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetConsumerGroupInfoRequest.decode(value),
    responseSerialize: (value: ConsumerGroupInfo) => Buffer.from(ConsumerGroupInfo.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ConsumerGroupInfo.decode(value),
  },
  listConsumerGroups: {
    path: "/fumarole.Fumarole/ListConsumerGroups",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListConsumerGroupsRequest) =>
      Buffer.from(ListConsumerGroupsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListConsumerGroupsRequest.decode(value),
    responseSerialize: (value: ListConsumerGroupsResponse) =>
      Buffer.from(ListConsumerGroupsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListConsumerGroupsResponse.decode(value),
  },
  deleteConsumerGroup: {
    path: "/fumarole.Fumarole/DeleteConsumerGroup",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteConsumerGroupRequest) =>
      Buffer.from(DeleteConsumerGroupRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteConsumerGroupRequest.decode(value),
    responseSerialize: (value: DeleteConsumerGroupResponse) =>
      Buffer.from(DeleteConsumerGroupResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteConsumerGroupResponse.decode(value),
  },
  createStaticConsumerGroup: {
    path: "/fumarole.Fumarole/CreateStaticConsumerGroup",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateStaticConsumerGroupRequest) =>
      Buffer.from(CreateStaticConsumerGroupRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateStaticConsumerGroupRequest.decode(value),
    responseSerialize: (value: CreateStaticConsumerGroupResponse) =>
      Buffer.from(CreateStaticConsumerGroupResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateStaticConsumerGroupResponse.decode(value),
  },
  subscribe: {
    path: "/fumarole.Fumarole/Subscribe",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: SubscribeRequest) => Buffer.from(SubscribeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SubscribeRequest.decode(value),
    responseSerialize: (value: SubscribeUpdate) => Buffer.from(SubscribeUpdate.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SubscribeUpdate.decode(value),
  },
  getSlotLagInfo: {
    path: "/fumarole.Fumarole/GetSlotLagInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSlotLagInfoRequest) => Buffer.from(GetSlotLagInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSlotLagInfoRequest.decode(value),
    responseSerialize: (value: GetSlotLagInfoResponse) => Buffer.from(GetSlotLagInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetSlotLagInfoResponse.decode(value),
  },
  getOldestSlot: {
    path: "/fumarole.Fumarole/GetOldestSlot",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetOldestSlotRequest) => Buffer.from(GetOldestSlotRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetOldestSlotRequest.decode(value),
    responseSerialize: (value: GetOldestSlotResponse) => Buffer.from(GetOldestSlotResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetOldestSlotResponse.decode(value),
  },
} as const;

export interface FumaroleServer extends UntypedServiceImplementation {
  listAvailableCommitmentLevels: handleUnaryCall<
    ListAvailableCommitmentLevelsRequest,
    ListAvailableCommitmentLevelsResponse
  >;
  getConsumerGroupInfo: handleUnaryCall<GetConsumerGroupInfoRequest, ConsumerGroupInfo>;
  listConsumerGroups: handleUnaryCall<ListConsumerGroupsRequest, ListConsumerGroupsResponse>;
  deleteConsumerGroup: handleUnaryCall<DeleteConsumerGroupRequest, DeleteConsumerGroupResponse>;
  createStaticConsumerGroup: handleUnaryCall<CreateStaticConsumerGroupRequest, CreateStaticConsumerGroupResponse>;
  subscribe: handleBidiStreamingCall<SubscribeRequest, SubscribeUpdate>;
  getSlotLagInfo: handleUnaryCall<GetSlotLagInfoRequest, GetSlotLagInfoResponse>;
  getOldestSlot: handleUnaryCall<GetOldestSlotRequest, GetOldestSlotResponse>;
}

export interface FumaroleClient extends Client {
  listAvailableCommitmentLevels(
    request: ListAvailableCommitmentLevelsRequest,
    callback: (error: ServiceError | null, response: ListAvailableCommitmentLevelsResponse) => void,
  ): ClientUnaryCall;
  listAvailableCommitmentLevels(
    request: ListAvailableCommitmentLevelsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListAvailableCommitmentLevelsResponse) => void,
  ): ClientUnaryCall;
  listAvailableCommitmentLevels(
    request: ListAvailableCommitmentLevelsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListAvailableCommitmentLevelsResponse) => void,
  ): ClientUnaryCall;
  getConsumerGroupInfo(
    request: GetConsumerGroupInfoRequest,
    callback: (error: ServiceError | null, response: ConsumerGroupInfo) => void,
  ): ClientUnaryCall;
  getConsumerGroupInfo(
    request: GetConsumerGroupInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ConsumerGroupInfo) => void,
  ): ClientUnaryCall;
  getConsumerGroupInfo(
    request: GetConsumerGroupInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ConsumerGroupInfo) => void,
  ): ClientUnaryCall;
  listConsumerGroups(
    request: ListConsumerGroupsRequest,
    callback: (error: ServiceError | null, response: ListConsumerGroupsResponse) => void,
  ): ClientUnaryCall;
  listConsumerGroups(
    request: ListConsumerGroupsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListConsumerGroupsResponse) => void,
  ): ClientUnaryCall;
  listConsumerGroups(
    request: ListConsumerGroupsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListConsumerGroupsResponse) => void,
  ): ClientUnaryCall;
  deleteConsumerGroup(
    request: DeleteConsumerGroupRequest,
    callback: (error: ServiceError | null, response: DeleteConsumerGroupResponse) => void,
  ): ClientUnaryCall;
  deleteConsumerGroup(
    request: DeleteConsumerGroupRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteConsumerGroupResponse) => void,
  ): ClientUnaryCall;
  deleteConsumerGroup(
    request: DeleteConsumerGroupRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteConsumerGroupResponse) => void,
  ): ClientUnaryCall;
  createStaticConsumerGroup(
    request: CreateStaticConsumerGroupRequest,
    callback: (error: ServiceError | null, response: CreateStaticConsumerGroupResponse) => void,
  ): ClientUnaryCall;
  createStaticConsumerGroup(
    request: CreateStaticConsumerGroupRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateStaticConsumerGroupResponse) => void,
  ): ClientUnaryCall;
  createStaticConsumerGroup(
    request: CreateStaticConsumerGroupRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateStaticConsumerGroupResponse) => void,
  ): ClientUnaryCall;
  subscribe(): ClientDuplexStream<SubscribeRequest, SubscribeUpdate>;
  subscribe(options: Partial<CallOptions>): ClientDuplexStream<SubscribeRequest, SubscribeUpdate>;
  subscribe(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<SubscribeRequest, SubscribeUpdate>;
  getSlotLagInfo(
    request: GetSlotLagInfoRequest,
    callback: (error: ServiceError | null, response: GetSlotLagInfoResponse) => void,
  ): ClientUnaryCall;
  getSlotLagInfo(
    request: GetSlotLagInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetSlotLagInfoResponse) => void,
  ): ClientUnaryCall;
  getSlotLagInfo(
    request: GetSlotLagInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetSlotLagInfoResponse) => void,
  ): ClientUnaryCall;
  getOldestSlot(
    request: GetOldestSlotRequest,
    callback: (error: ServiceError | null, response: GetOldestSlotResponse) => void,
  ): ClientUnaryCall;
  getOldestSlot(
    request: GetOldestSlotRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetOldestSlotResponse) => void,
  ): ClientUnaryCall;
  getOldestSlot(
    request: GetOldestSlotRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetOldestSlotResponse) => void,
  ): ClientUnaryCall;
}

export const FumaroleClient = makeGenericClientConstructor(FumaroleService, "fumarole.Fumarole") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FumaroleClient;
  service: typeof FumaroleService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
